/* How to use the DHT-22 sensor with Arduino uno
   Temperature and humidity sensor
*/

//Libraries
#include <DHT.h>
#include <SoftwareSerial.h>
//Constants
#define Buzz 9
#define LED1 13
#define LED2 12
#define DHTPIN 7     // what dht pin we're connected to
#define MQ2pin 2      //analog pin
#define FLAME 8       //digital pin
#define MQ135pin 0 // A0
#define DHTTYPE DHT22   // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE); // Initialize DHT sensor for normal 16mhz Arduino
SoftwareSerial sserial(4, 5); //Initialize SoftwareSerial with input and output pins respectively.
//Variables
int chk;
float hum;  //Stores humidity value
float intemp, temp; //Stores temperature value
//MQ2
float sensorValuepres;  //variable to store sensor value
float sensorValuepast;
int smoke = 0;
//MQ135
int sensorValue;
int digitalValue;
float val, val1;
//State of the End Module
//The bits are in this order respectively : [Smoke,Flamable_Gas,Fire,Humidity_Down,Temperature_Up]
int state = 0;

byte packet0[] =  {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x30, 0xEF};
byte packet1[] =  {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x31, 0xEE};
byte packet2[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x32, 0xED};
byte packet3[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x33, 0xEC};
byte packet4[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x34, 0xEB};
byte packet5[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x35, 0xEA};
byte packet6[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x36, 0xE9};
byte packet7[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x37, 0xE8};
byte packet8[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x38, 0xE7};
byte packet9[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x30, 0x39, 0xE6};

byte packet10[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x30, 0xEE};
byte packet11[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x31, 0xED};
byte packet12[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x32, 0xEC};
byte packet13[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x33, 0xEB};
byte packet14[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x34, 0xEA};
byte packet15[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x35, 0xE9};
byte packet16[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x36, 0xE8};
byte packet17[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x37, 0xE7};
byte packet18[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x38, 0xE6};
byte packet19[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x31, 0x39, 0xE5};

byte packet20[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x30, 0xED};
byte packet21[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x31, 0xEC};
byte packet22[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x32, 0xEB};
byte packet23[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x33, 0xEA};
byte packet24[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x34, 0xE9};
byte packet25[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x35, 0xE8};
byte packet26[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x36, 0xE7};
byte packet27[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x37, 0xE6};
byte packet28[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x38, 0xE5};
byte packet29[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x32, 0x39, 0xE4};

byte packet30[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x33, 0x30, 0xEC};
byte packet31[] = {0x7E, 0x00, 0x10, 0x10, 0x01, 0x00, 0x7D, 0x33, 0xA2, 0x00, 0x41, 0xE1, 0xE4, 0xE7, 0xFF, 0xFE, 0x00, 0x00, 0x33, 0x31, 0xEB};
void setup()
{

  Serial.begin(9600);
  sserial.begin(9600);
  //  Buzzer
  pinMode(Buzz, OUTPUT);
  //  DHT22
  dht.begin();

  pinMode(FLAME, INPUT);//define FLAME input pin
  //MQ135
  //  pinMode(13, OUTPUT);
  pinMode(MQ135pin, INPUT);

  //MQ2
  Serial.println("Sensor warming up!");
  //  sensorValuepast = analogRead(MQ2pin);
  //Serial.print("Sensor Value: ");
  //Serial.println(sensorValuepast);
  delay(2000);
  //  sensorValuepres = analogRead(MQ2pin);
  //Serial.print("Sensor Value: ");
  //Serial.println(sensorValuepres);
  //  val= dht.readTemperature()+20;
  //  val1=dht.readHumidity()-35;
  delay(200); // allow the MQ-6 to warm up
}
void loop()
{
  //DHT22
  delay(2000);
  //Read data and store it to variables hum and temp
  //    hum = dht.readHumidity();
  //    temp= dht.readTemperature();
  //    //check if the zone is in a safe temperature range
  //    if(temp>val)//48 actual value
  //    {
  //       state = state|(1);
  //    }
  //    else
  //    {
  //       state = state&~(1);
  //    }
  //    //Statistically an area is classified to be prone to fire if the humidity is less than 45 percent.
  //     if(hum<val1 || hum<45)//45
  //    {
  //       state = state|(1<<1);
  //    }
  //    else
  //    {
  //       state = state&~(1<<1);
  //    }
  //    //Print temp and humidity values to serial monitor
  //    Serial.print("Humidity: ");
  //    Serial.print(hum);
  //    Serial.print(" %, Temp: ");
  //    Serial.print(temp);
  //    Serial.println(" Celsius");
  //Flame sensor
  int fire = digitalRead(FLAME);// read FLAME sensor
  if ( fire == LOW) {
    //Serial.println("Fire! Fire!Your pants will be on fire");
    state = state | (1 << (3 - 1));
    //      intemp=dht.readTemperature();
    //      delay(10000);
    //      temp=dht.readTemperature();
    //      if(temp-intemp>0.5)
    //      state=state|(1);
    //      else
    //      state=state&~(1);
    if (state >= 4 || state <= 7) {
      digitalWrite(Buzz, HIGH);
      Serial.println("Fire is detected");
    }
    else
    {
      Serial.println("False alarm ir radation detected for a second");
      state = 0;
    }
  }
  else {
    Serial.println("Enjoy");
    digitalWrite(Buzz, LOW);
    //Serial.println("Enjoy ur life till u have time!!!!");
    //      state = state&~(1<<(3-1));
    state = 0;
  }
  //  //MQ2
  //    sensorValuepres = analogRead(MQ2pin); // read analog input pin 0
  ////    Serial.print("Sensor Value (MQ2): ");
  ////    Serial.print(sensorValuepres);
  //    float diff=sensorValuepres-sensorValuepast ;
  //    if(diff > 18) {
  //      Serial.print(" | Smoke detected!");
  //      smoke=1;
  //      digitalWrite(LED1,HIGH);
  //      state = state|(1<<(5-1));
  //    }
  //    if(diff<18-(diff/2)) {
  //      smoke=0;
  //      digitalWrite(LED1, LOW);
  //      state = state&~(1<<(5-1));
  //    }
  //    if(smoke ==0) {
  //    sensorValuepast= sensorValuepres;
  //    }
  //    Serial.println("");
  ////MQ135
  //    sensorValue = analogRead(MQ135pin); // read analog input pin 0
  //    digitalValue = digitalRead(4);
  //    if (sensorValue > 200)
  //    {
  //      //digitalWrite(13, HIGH);
  //      digitalWrite(LED2, HIGH);
  //      state = state|(1<<(4-1));
  //    }
  //    else
  //    {
  //      //digitalWrite(13, LOW);
  //      digitalWrite(LED2, LOW);
  //      state = state&~(1<<(4-1));
  //    }
  Serial.print("State value:");
  Serial.println(state);
  //      Serial.print("Sensor Value 135: ");
  //    Serial.println(sensorValue, DEC); // prints the value read
  //    //Serial.println(digitalValue, DEC);
  Serial.println(state, BIN);
  Serial.println();

  switch (state)
  {
    case 0:
      sserial.write(packet0, 21);
      break;
    case 1:
      sserial.write(packet1, 21);
      break;
    case 2:
      sserial.write(packet2, 21);
      break;
    case 3:
      sserial.write(packet3, 21);
      break;
    case 4:
      sserial.write(packet4, 21);
      break;
    case 5:
      sserial.write(packet5, 21);
      break;
    case 6:
      sserial.write(packet6, 21);
      break;
    case 7:
      sserial.write(packet7, 21);
      break;
    case 8:
      sserial.write(packet8, 21);
      break;
    case 9:
      sserial.write(packet9, 21);
      break;
    case 10:
      sserial.write(packet10, 21);
      break;
    case 11:
      sserial.write(packet11, 21);
      break;
    case 12 :
      sserial.write(packet12, 21);
      break;
    case 13:
      sserial.write(packet13, 21);
      break;
    case 14:
      sserial.write(packet14, 21);
      break;
    case 15:
      sserial.write(packet15, 21);
      break;
    case 16:
      sserial.write(packet16, 21);
      break;
    case 17:
      sserial.write(packet17, 21);
      break;
    case 18:
      sserial.write(packet18, 21);
      break;
    case 19:
      sserial.write(packet19, 21);
      break;
    case 20 :
      sserial.write(packet20, 21);
      break;
    case 21:
      sserial.write(packet21, 21);
      break;
    case 22:
      sserial.write(packet22, 21);
      break;
    case 23:
      sserial.write(packet23, 21);
      break;
    case 24:
      sserial.write(packet24, 21);
      break;
    case 25:
      sserial.write(packet25, 21);
      break;
    case 26:
      sserial.write(packet26, 21);
      break;
    case 27:
      sserial.write(packet27, 21);
      break;
    case 28:
      sserial.write(packet28, 21);
      break;
    case 29:
      sserial.write(packet29, 21);
      break;
    case 30:
      sserial.write(packet30, 21);
      break;
    case 31 :
      sserial.write(packet31, 21);
      break;
  }
  delay(3000); // wait 3.5s for next reading
}
